'use client';

import React, { useState, useRef, useEffect } from 'react';
import { Mic, MicOff, Wand2, Type, Users, Check, X, FileText, Eye, EyeOff, BookOpen, Sparkles, Loader2, Plus } from 'lucide-react';
import { Room, RoomEvent, RemoteParticipant, DataPacket_Kind } from 'livekit-client';
import { FaCopy, FaPaperPlane } from 'react-icons/fa';

interface AdvancedEditorProps {
  initialContent?: string;
  onContentChange?: (content: string) => void;
  readOnly?: boolean;
  noteId?: string;
  user?: { id: string; name?: string };
}

// Related image type
interface RelatedImage {
  src: string;
  thumbnail: string;
  title: string;
  context: string;
  width?: number;
  height?: number;
}

export default function AdvancedEditor({
  initialContent = '',
  onContentChange,
  readOnly = false,
  noteId,
  user,
}: AdvancedEditorProps) {
  // Basic state
  const [content, setContent] = useState(initialContent);
  const [aiEnabled, setAiEnabled] = useState(true);
  const [systemMessage, setSystemMessage] = useState('');
  const [previewMode, setPreviewMode] = useState(false);
  const [aiSuggestion, setAiSuggestion] = useState('');
  const [isGeneratingSuggestion, setIsGeneratingSuggestion] = useState(false);
  const [isSpeechToText, setIsSpeechToText] = useState(false);
  const [selectedFormat, setSelectedFormat] = useState<string | null>(null);
  const [showFormatOptions, setShowFormatOptions] = useState(false);
  
  // AI assistant chat state
  const [showAIChat, setShowAIChat] = useState(false);
  const [chatMessages, setChatMessages] = useState<{ id: string; role: 'user' | 'assistant'; content: string; timestamp: Date }[]>([]);
  const [userQuestion, setUserQuestion] = useState('');
  const [isSendingMessage, setIsSendingMessage] = useState(false);
  
  // Related content state
  const [relatedImages, setRelatedImages] = useState<RelatedImage[]>([]);
  const [showRelatedImages, setShowRelatedImages] = useState(false);
  const [isLoadingImages, setIsLoadingImages] = useState(false);
  const [relatedTopics, setRelatedTopics] = useState<string[]>([]);
  const [showRelatedTopics, setShowRelatedTopics] = useState(false);
  const [isGeneratingTopics, setIsGeneratingTopics] = useState(false);
  
  // LiveKit collaboration state
  const [room, setRoom] = useState<Room | null>(null);
  const [isCollaborating, setIsCollaborating] = useState(false);
  const [collaborators, setCollaborators] = useState<string[]>([]);
  
  // Refs
  const editorRef = useRef<HTMLTextAreaElement>(null);
  const chatInputRef = useRef<HTMLInputElement>(null);
  const chatContainerRef = useRef<HTMLDivElement>(null);
  const initialRenderRef = useRef(true);
  const debounceTimerRef = useRef<NodeJS.Timeout | null>(null);

  // Initialize content from props - only when prop changes, not on every content change
  useEffect(() => {
    setContent(initialContent);
  }, [initialContent]);

  // Update parent component when content changes - prevent the circular dependency
  useEffect(() => {
    // Skip the first render to prevent initial infinite loop
    if (initialRenderRef.current) {
      initialRenderRef.current = false;
      return;
    }
    
    // Use a timeout to debounce rapid changes and prevent tight render loops
    if (debounceTimerRef.current) {
      clearTimeout(debounceTimerRef.current);
    }
    
    debounceTimerRef.current = setTimeout(() => {
      onContentChange?.(content);
      debounceTimerRef.current = null;
    }, 500);
    
    return () => {
      if (debounceTimerRef.current) {
        clearTimeout(debounceTimerRef.current);
      }
    };
  }, [content, onContentChange]);

  // Toggle AI features
  const toggleAI = () => {
    setAiEnabled(!aiEnabled);
    setSystemMessage(`AI suggestions ${!aiEnabled ? 'enabled' : 'disabled'}`);
  };

  // Get AI suggestion with real API call
  const getAISuggestion = async () => {
    if (!aiEnabled || content.length < 20) {
      setSystemMessage('Please write more content to get AI suggestions');
      return;
    }
    
    setIsGeneratingSuggestion(true);
    setSystemMessage('Generating AI suggestion...');
    
    try {
      // Make a real API call to your backend
      const response = await fetch('/api/ai', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          operation: 'complete',
          partialContent: content,
        }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to get AI suggestion');
      }
      
      const data = await response.json();
      if (data.completion) {
        setAiSuggestion(data.completion);
        setSystemMessage('AI suggestion ready');
      } else if (data.error) {
        setSystemMessage(`Error: ${data.error}`);
      } else {
        setSystemMessage('No suggestion available at this time');
      }
    } catch (error) {
      console.error('Error getting AI suggestion:', error);
      setSystemMessage('Failed to get AI suggestion. Please try again.');
    } finally {
      setIsGeneratingSuggestion(false);
    }
  };

  // Accept AI suggestion
  const acceptSuggestion = () => {
    if (!aiSuggestion) return;
    
    const newContent = `${content}\n\n${aiSuggestion}`;
    setContent(newContent);
    setAiSuggestion('');
    
    // Move cursor to end
    setTimeout(() => {
      if (editorRef.current) {
        editorRef.current.focus();
        editorRef.current.setSelectionRange(newContent.length, newContent.length);
      }
    }, 0);
  };

  // Reject AI suggestion
  const rejectSuggestion = () => {
    setAiSuggestion('');
    setSystemMessage('AI suggestion dismissed');
  };

  // Format selected text
  const formatSelectedText = (format: string) => {
    if (!editorRef.current) return;
    
    const start = editorRef.current.selectionStart;
    const end = editorRef.current.selectionEnd;
    
    if (start === end) {
      setSystemMessage('Please select some text to format');
      return;
    }
    
    const selectedText = content.substring(start, end);
    let formattedText = selectedText;
    
    // Apply different formatting based on the selected format
    switch (format) {
      case 'bold':
        formattedText = `**${selectedText}**`;
        break;
      case 'italic':
        formattedText = `*${selectedText}*`;
        break;
      case 'code':
        formattedText = `\`${selectedText}\``;
        break;
      case 'heading1':
        formattedText = `# ${selectedText}`;
        break;
      case 'heading2':
        formattedText = `## ${selectedText}`;
        break;
      case 'heading3':
        formattedText = `### ${selectedText}`;
        break;
      case 'quote':
        formattedText = `> ${selectedText}`;
        break;
      case 'list':
        formattedText = selectedText
          .split('\n')
          .map(line => `- ${line}`)
          .join('\n');
        break;
      default:
        break;
    }
    
    const newContent = content.substring(0, start) + formattedText + content.substring(end);
    setContent(newContent);
    
    // Set selection to new text
    setTimeout(() => {
      if (editorRef.current) {
        editorRef.current.focus();
        editorRef.current.setSelectionRange(
          start, 
          start + formattedText.length
        );
      }
    }, 0);
    
    setSystemMessage(`Applied ${format} formatting`);
    setShowFormatOptions(false);
  };

  // Handle voice recording with real Deepgram integration
  const toggleVoiceRecording = async () => {
    setIsSpeechToText(!isSpeechToText);
    
    if (!isSpeechToText) {
      setSystemMessage('Speech-to-text activated. Speak now...');
      
      try {
        // Check if mediaDevices is available (will be undefined in non-secure contexts or server-side)
        if (!navigator.mediaDevices) {
          throw new Error('Audio recording is not supported in this environment. Please use HTTPS or a modern browser.');
        }
        
        // Request microphone access
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        const mediaRecorder = new MediaRecorder(stream);
        const audioChunks: Blob[] = [];
        
        mediaRecorder.addEventListener('dataavailable', (event) => {
          audioChunks.push(event.data);
        });
        
        mediaRecorder.addEventListener('stop', async () => {
          const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
          const formData = new FormData();
          formData.append('audio', audioBlob);
          
          try {
            const response = await fetch('/api/speech-to-text', {
              method: 'POST',
              body: formData,
            });
            
            if (!response.ok) {
              throw new Error('Speech-to-text request failed');
            }
            
            const data = await response.json();
            if (data.transcription) {
              const newContent = content ? `${content}\n\n${data.transcription}` : data.transcription;
              setContent(newContent);
              setSystemMessage('Speech transcription added');
            } else {
              setSystemMessage('No transcription received');
            }
          } catch (error) {
            console.error('Error with speech-to-text:', error);
            setSystemMessage('Failed to transcribe speech. Please try again.');
          }
        });
        
        // Start recording
        mediaRecorder.start();
        
        // Record for 10 seconds then stop
        setTimeout(() => {
          if (mediaRecorder.state !== 'inactive') {
            mediaRecorder.stop();
            stream.getTracks().forEach(track => track.stop());
          }
          setIsSpeechToText(false);
        }, 10000);
      } catch (error) {
        console.error('Error accessing microphone:', error);
        setSystemMessage('Failed to access microphone. Please check permissions.');
        setIsSpeechToText(false);
      }
    } else {
      // User manually stopped recording
      setSystemMessage('Speech-to-text stopped');
    }
  };

  // Connect to LiveKit room
  const connectToLivekitRoom = async () => {
    if (!noteId || !user) {
      setSystemMessage('Cannot enable collaboration without a valid note ID and user');
      return;
    }

    try {
      // Get token from your backend
      const response = await fetch('/api/livekit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          room: `note-${noteId}`,
          username: user.name || user.id,
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to get collaboration token');
      }

      const { token } = await response.json();
      
      // Create a new room and connect
      const newRoom = new Room();
      setRoom(newRoom);
      
      // Set up event listeners for participant connect/disconnect
      newRoom.on(RoomEvent.ParticipantConnected, (participant: RemoteParticipant) => {
        setCollaborators(prev => [...prev, participant.identity]);
        setSystemMessage(`${participant.identity} joined the collaboration`);
      });
      
      newRoom.on(RoomEvent.ParticipantDisconnected, (participant: RemoteParticipant) => {
        setCollaborators(prev => prev.filter(id => id !== participant.identity));
        setSystemMessage(`${participant.identity} left the collaboration`);
      });
      
      // Listen for data messages from other participants
      newRoom.on(RoomEvent.DataReceived, (payload: Uint8Array, participant?: RemoteParticipant) => {
        if (!participant) return;
        
        try {
          const data = JSON.parse(new TextDecoder().decode(payload));
          
          if (data.type === 'cursor') {
            // Handle cursor position updates from other participants
            console.log(`${participant.identity} cursor at position ${data.position}`);
          } else if (data.type === 'content') {
            // Handle content updates from other participants
            if (data.content !== content) {
              setContent(data.content);
            }
          }
        } catch (error) {
          console.error('Error parsing data message:', error);
        }
      });
      
      // Connect to the room
      await newRoom.connect(process.env.NEXT_PUBLIC_LIVEKIT_URL || '', token);
      setIsCollaborating(true);
      setSystemMessage('Real-time collaboration activated. Others can now join this note session.');
      
    } catch (error) {
      console.error('Error connecting to LiveKit room:', error);
      setSystemMessage('Failed to start collaboration. Please try again.');
    }
  };
  
  // Send data to the room
  const sendDataToRoom = (type: string, data: any) => {
    if (!room || !isCollaborating) return;
    
    try {
      const message = JSON.stringify({
        type,
        ...data,
      });
      
      const encoder = new TextEncoder();
      const payload = encoder.encode(message);
      room.localParticipant.publishData(payload, DataPacket_Kind.RELIABLE);
    } catch (error) {
      console.error('Error sending data to room:', error);
    }
  };

  // Toggle collaboration
  const toggleCollaboration = () => {
    if (isCollaborating) {
      // Disconnect from room
      if (room) {
        room.disconnect();
        setRoom(null);
      }
      setIsCollaborating(false);
      setCollaborators([]);
      setSystemMessage('Collaboration ended');
    } else {
      // Connect to room
      connectToLivekitRoom();
    }
  };
  
  // Clean up LiveKit connection when component unmounts
  useEffect(() => {
    return () => {
      if (room) {
        room.disconnect();
      }
    };
  }, [room]);
  
  // Send cursor position updates when collaborating
  useEffect(() => {
    if (isCollaborating && editorRef.current && !previewMode) {
      const handleSelectionChange = () => {
        if (editorRef.current) {
          sendDataToRoom('cursor', { position: editorRef.current.selectionStart });
        }
      };
      
      editorRef.current.addEventListener('select', handleSelectionChange);
      return () => {
        if (editorRef.current) {
          editorRef.current.removeEventListener('select', handleSelectionChange);
        }
      };
    }
  }, [isCollaborating, previewMode]);
  
  // Send content updates when collaborating
  useEffect(() => {
    if (isCollaborating && !initialRenderRef.current) {
      const sendContentUpdate = () => {
        sendDataToRoom('content', { content });
      };
      
      const timeout = setTimeout(sendContentUpdate, 500);
      return () => clearTimeout(timeout);
    }
  }, [content, isCollaborating]);

  // Handle content changes
  const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setContent(e.target.value);
  };

  // Simple markdown to HTML conversion
  const renderMarkdown = (markdownText: string) => {
    if (!markdownText) return '';
    
    let html = markdownText;
    
    // Convert headers
    html = html.replace(/^# (.*$)/gm, '<h1>$1</h1>');
    html = html.replace(/^## (.*$)/gm, '<h2>$1</h2>');
    html = html.replace(/^### (.*$)/gm, '<h3>$1</h3>');
    
    // Convert bold and italic
    html = html.replace(/\*\*(.*?)\*\*/gm, '<strong>$1</strong>');
    html = html.replace(/\*(.*?)\*/gm, '<em>$1</em>');
    
    // Convert lists
    html = html.replace(/^\- (.*$)/gm, '<li>$1</li>');
    html = html.replace(/<li>(.*)<\/li>/gm, '<ul><li>$1</li></ul>');
    
    // Convert code
    html = html.replace(/`(.*?)`/gm, '<code>$1</code>');
    
    // Convert links
    html = html.replace(/\[(.*?)\]\((.*?)\)/gm, '<a href="$2">$1</a>');
    
    // Convert paragraphs
    html = html.replace(/^(?!<[h|u|l|c])(.*$)/gm, '<p>$1</p>');
    
    // Fix empty lines
    html = html.replace(/<p><\/p>/gm, '<br>');
    
    return html;
  };

  // Get related images based on content
  const getRelatedImages = async () => {
    setIsLoadingImages(true);
    setSystemMessage('');
    
    try {
      // Check if there's enough content to extract meaningful search terms
      if (content.trim().length < 20) {
        setSystemMessage('Please write more content to find relevant images');
        setIsLoadingImages(false);
        return;
      }
      
      // Extract the topic from headings or first paragraph
      let topic = '';
      
      // Try to get the first heading
      const headingMatch = content.match(/#{1,6}\s+(.+)$/m);
      if (headingMatch && headingMatch[1]) {
        topic = headingMatch[1].trim();
      } else {
        // Try to get the first paragraph
        const paragraphs = content.split('\n\n');
        for (const para of paragraphs) {
          const cleanPara = para.trim();
          if (cleanPara.length > 15) {
            topic = cleanPara.substring(0, 100);
            break;
          }
        }
      }
      
      // If we still don't have a topic, take the first 100 chars of content
      if (!topic) {
        topic = content.trim().substring(0, 100);
      }
      
      // Clean the topic - remove markdown syntax and limit length
      topic = topic.replace(/[#*_~`>]/g, '').trim();
      
      if (topic.length < 3) {
        setSystemMessage('Cannot determine a good search topic from your content');
        setIsLoadingImages(false);
        
        // Set placeholder images
        setRelatedImages([
          { 
            src: 'https://via.placeholder.com/400/e2e8f0/64748b?text=Add+more+content', 
            thumbnail: 'https://via.placeholder.com/150/e2e8f0/64748b?text=Add+more+content',
            title: 'Add more specific content to search',
            context: '#',
            width: 400,
            height: 300
          },
          { 
            src: 'https://via.placeholder.com/400/e2e8f0/64748b?text=Try+adding+headings', 
            thumbnail: 'https://via.placeholder.com/150/e2e8f0/64748b?text=Try+adding+headings',
            title: 'Add headings to improve search results',
            context: '#',
            width: 400,
            height: 300
          }
        ]);
        return;
      }
      
      console.log('Searching for images related to:', topic);
      const response = await fetch(`/api/related-images?q=${encodeURIComponent(topic)}`);
      
      if (!response.ok) {
        throw new Error(`Error fetching images: ${response.statusText}`);
      }
      
      const data = await response.json();
      setRelatedImages(data);
      
      if (data.length === 0) {
        setSystemMessage('No related images found for this topic');
      }
    } catch (error) {
      console.error('Error fetching related images:', error);
      setSystemMessage(`Error finding related images: ${error instanceof Error ? error.message : 'Unknown error'}`);
      
      // Set placeholder images in case of error
      setRelatedImages([
        { 
          src: 'https://via.placeholder.com/400/f8fafc/64748b?text=Search+Error', 
          thumbnail: 'https://via.placeholder.com/150/f8fafc/64748b?text=Search+Error',
          title: 'Error loading images',
          context: '#',
          width: 400,
          height: 300
        },
        { 
          src: 'https://via.placeholder.com/400/f8fafc/64748b?text=Try+Again', 
          thumbnail: 'https://via.placeholder.com/150/f8fafc/64748b?text=Try+Again',
          title: 'Please try searching again',
          context: '#',
          width: 400,
          height: 300
        }
      ]);
    } finally {
      setIsLoadingImages(false);
    }
  };
  
  // Generate related topics based on content
  const generateRelatedTopics = async () => {
    if (content.length < 20) {
      setSystemMessage('Please write more content to generate related topics');
      return;
    }
    
    setIsGeneratingTopics(true);
    setShowRelatedTopics(true);
    
    try {
      const response = await fetch('/api/ai', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          operation: 'find-related-topics',
          content: content,
        }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to generate related topics');
      }
      
      const data = await response.json();
      if (data.relatedTopics) {
        setRelatedTopics(data.relatedTopics);
        setSystemMessage('Related topics generated');
      } else {
        setSystemMessage('No related topics found');
      }
    } catch (error) {
      console.error('Error generating related topics:', error);
      setSystemMessage('Failed to generate related topics. Please try again.');
    } finally {
      setIsGeneratingTopics(false);
    }
  };
  
  // Send a question to the AI about the current note content
  const sendQuestionToAI = async () => {
    if (!userQuestion.trim()) {
      return;
    }
    
    // Create a unique ID for this message to help with deduplication
    const messageId = Date.now().toString();
    
    const newMessage = {
      id: messageId,
      role: 'user' as const,
      content: userQuestion,
      timestamp: new Date(),
    };
    
    // Save the current question before clearing the input
    const currentQuestion = userQuestion;
    
    // Update state in this specific order to avoid React batch update issues
    setUserQuestion(''); // Clear input first
    setChatMessages(prev => [...prev.filter(msg => msg.id !== messageId), newMessage]); // Ensure no duplicates
    setIsSendingMessage(true);
    
    try {
      console.log("Sending question to AI:", currentQuestion);
      
      const response = await fetch('/api/ai', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          operation: 'answer-question',
          content: content,
          question: currentQuestion,
        }),
      });
      
      const data = await response.json();
      console.log("AI response:", data);
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to get answer from AI');
      }
      
      // Create a unique ID for this response
      const responseId = Date.now().toString();
      
      // Ensure we're getting a string from the data.answer
      let answerText = 'I couldn\'t generate an answer at this time.';
      if (data && data.answer) {
        // Handle cases where answer might be an object instead of a string
        if (typeof data.answer === 'object') {
          // Try to extract text from the answer object
          if (data.answer.text) {
            answerText = data.answer.text;
          } else if (data.answer.content) {
            answerText = data.answer.content;
          } else {
            // If we can't find a text property, stringify the object
            try {
              answerText = JSON.stringify(data.answer);
            } catch (e) {
              console.error('Error stringifying AI response:', e);
            }
          }
        } else {
          // If it's already a string, use it directly
          answerText = data.answer;
        }
      }
      
      const aiResponse = {
        id: responseId,
        role: 'assistant' as const,
        content: answerText,
        timestamp: new Date(),
      };
      
      // Add the AI response to chat messages, ensuring deduplication
      setChatMessages(prev => [...prev.filter(msg => msg.id !== responseId), aiResponse]);
    } catch (error) {
      console.error('Error getting AI answer:', error);
      
      const errorMessage = {
        id: `error-${Date.now()}`,
        role: 'assistant' as const,
        content: 'Sorry, I encountered an error while processing your question. Please try again.',
        timestamp: new Date(),
      };
      
      setChatMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsSendingMessage(false);
      
      // Scroll to bottom of chat
      setTimeout(() => {
        if (chatContainerRef.current) {
          chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
        }
      }, 100);
    }
  };
  
  // Add a related topic to the note
  const addRelatedTopicToNote = (topic: string) => {
    const topicText = `\n\n## ${topic}`;
    const newContent = `${content}${topicText}`;
    setContent(newContent);
    setSystemMessage(`Added "${topic}" section to note`);
  };
  
  // Toggle AI chat panel
  const toggleAIChat = () => {
    setShowAIChat(!showAIChat);
    if (!showAIChat && chatMessages.length === 0) {
      const welcomeMessage = {
        id: 'welcome',
        role: 'assistant' as const,
        content: 'Hi there! I\'m your note assistant. You can ask me questions about your note, and I\'ll do my best to help.',
        timestamp: new Date(),
      };
      setChatMessages([welcomeMessage]);
    }
    
    // Focus on input when chat opens
    setTimeout(() => {
      if (chatInputRef.current) {
        chatInputRef.current.focus();
      }
    }, 100);
  };

  // Handle keyboard shortcuts and set up window event listeners
  useEffect(() => {
    const handleKeyDown = (e: globalThis.KeyboardEvent) => {
      // Alt+A or Option+A for AI assistant
      if ((e.altKey || e.metaKey) && e.key === 'a') {
        e.preventDefault();
        setShowAIChat(!showAIChat);
      }
      
      // Alt+R or Option+R for related images
      if ((e.altKey || e.metaKey) && e.key === 'r') {
        e.preventDefault();
        if (showRelatedImages) {
          getRelatedImages();
        } else {
          setShowRelatedImages(true);
          setTimeout(() => getRelatedImages(), 100);
        }
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [showAIChat, showRelatedImages, getRelatedImages]);

  return (
    <div className="flex flex-col h-full overflow-hidden border border-gray-200 rounded-lg">
      {/* Toolbar */}
      <div className="flex items-center p-2 border-b border-gray-200 bg-gray-50">
        <div className="flex space-x-1">
          <button
            onClick={toggleAI}
            className={`p-1.5 rounded-md ${aiEnabled ? 'bg-indigo-100 text-indigo-700' : 'hover:bg-gray-200'}`}
            title={aiEnabled ? 'Disable AI suggestions' : 'Enable AI suggestions'}
          >
            <Wand2 size={18} />
          </button>
          
          <div className="relative">
            <button
              onClick={() => setShowFormatOptions(!showFormatOptions)}
              className="p-1.5 rounded-md hover:bg-gray-200"
              title="Format text"
            >
              <Type size={18} />
            </button>
            
            {showFormatOptions && (
              <div className="absolute left-0 mt-2 w-48 bg-white rounded-md shadow-lg z-20 border border-gray-200">
                <div className="py-1">
                  <button
                    className="flex items-center px-4 py-2 text-sm w-full text-left text-gray-700 hover:bg-gray-100"
                    onClick={() => formatSelectedText('bold')}
                  >
                    <strong className="mr-2">B</strong> Bold
                  </button>
                  <button
                    className="flex items-center px-4 py-2 text-sm w-full text-left text-gray-700 hover:bg-gray-100"
                    onClick={() => formatSelectedText('italic')}
                  >
                    <em className="mr-2">I</em> Italic
                  </button>
                  <button
                    className="flex items-center px-4 py-2 text-sm w-full text-left text-gray-700 hover:bg-gray-100"
                    onClick={() => formatSelectedText('code')}
                  >
                    <code className="mr-2 px-1 bg-gray-100 rounded">{"{ }"}</code> Code
                  </button>
                  <button
                    className="flex items-center px-4 py-2 text-sm w-full text-left text-gray-700 hover:bg-gray-100"
                    onClick={() => formatSelectedText('heading1')}
                  >
                    <span className="mr-2 font-bold text-lg">#</span> Heading 1
                  </button>
                  <button
                    className="flex items-center px-4 py-2 text-sm w-full text-left text-gray-700 hover:bg-gray-100"
                    onClick={() => formatSelectedText('heading2')}
                  >
                    <span className="mr-2 font-bold text-base">##</span> Heading 2
                  </button>
                  <button
                    className="flex items-center px-4 py-2 text-sm w-full text-left text-gray-700 hover:bg-gray-100"
                    onClick={() => formatSelectedText('list')}
                  >
                    <span className="mr-2">•</span> List
                  </button>
                  <button
                    className="flex items-center px-4 py-2 text-sm w-full text-left text-gray-700 hover:bg-gray-100"
                    onClick={() => formatSelectedText('quote')}
                  >
                    <span className="mr-2 text-gray-400">›</span> Quote
                  </button>
                </div>
              </div>
            )}
          </div>
          
          <button
            onClick={toggleVoiceRecording}
            className={`p-1.5 rounded-md ${isSpeechToText ? 'bg-red-100 text-red-600' : 'hover:bg-gray-200'}`}
            title={isSpeechToText ? 'Stop recording' : 'Start recording'}
          >
            {isSpeechToText ? <MicOff size={18} /> : <Mic size={18} />}
          </button>
          
          <button
            onClick={toggleCollaboration}
            className={`p-1.5 rounded-md ${isCollaborating ? 'bg-blue-100 text-blue-600' : 'hover:bg-gray-200'}`}
            title={isCollaborating ? 'Stop collaboration' : 'Enable collaboration'}
          >
            <Users size={18} />
          </button>
          
          <button
            onClick={toggleAIChat}
            className={`p-1.5 rounded-md ${showAIChat ? 'bg-purple-100 text-purple-600' : 'hover:bg-gray-200'}`}
            title="AI Chat Assistant"
          >
            <BookOpen size={18} />
          </button>
          
          <button
            onClick={getRelatedImages}
            className={`p-1.5 rounded-md ${showRelatedImages ? 'bg-green-100 text-green-600' : 'hover:bg-gray-200'}`}
            title="Find related images"
          >
            <FileText size={18} />
          </button>
          
          <button
            onClick={generateRelatedTopics}
            className={`p-1.5 rounded-md ${showRelatedTopics ? 'bg-yellow-100 text-yellow-600' : 'hover:bg-gray-200'}`}
            title="Generate related topics"
          >
            <Sparkles size={18} />
          </button>
          
          <button
            onClick={() => setPreviewMode(!previewMode)}
            className={`p-1.5 rounded-md ${previewMode ? 'bg-green-100 text-green-700' : 'hover:bg-gray-200'}`}
            title={previewMode ? 'Edit mode' : 'Preview mode'}
          >
            {previewMode ? <EyeOff size={18} /> : <Eye size={18} />}
          </button>
          
          {aiEnabled && content.length > 20 && (
            <button
              onClick={getAISuggestion}
              className="p-1.5 rounded-md hover:bg-gray-200 text-indigo-600"
              title="Get AI suggestions"
              disabled={isGeneratingSuggestion}
            >
              {isGeneratingSuggestion ? <Loader2 size={18} className="animate-spin" /> : <Sparkles size={18} />}
            </button>
          )}
        </div>
        
        <div className="ml-auto">
          {systemMessage && (
            <span className="text-sm text-gray-600 px-2 py-1 bg-gray-100 rounded-md">
              {systemMessage}
            </span>
          )}
        </div>
      </div>
      
      {/* Editor */}
      <div className="flex-1 relative overflow-hidden">
        <div className="flex h-full">
          {/* Main editor area */}
          <div className="flex-1 relative">
            {previewMode ? (
              <div 
                className="w-full h-full p-4 overflow-y-auto prose prose-indigo max-w-none"
                dangerouslySetInnerHTML={{ __html: renderMarkdown(content) }}
              />
            ) : (
              <textarea
                ref={editorRef}
                value={content}
                onChange={handleContentChange}
                className="w-full h-full p-4 resize-none focus:outline-none font-mono text-gray-800"
                placeholder="Start typing your note here..."
                readOnly={readOnly || isSpeechToText}
              />
            )}
          </div>
          
          {/* Related images panel */}
          {showRelatedImages && (
            <div className="w-1/4 min-w-[250px] border-l border-gray-200 p-3 overflow-y-auto">
              <div className="flex justify-between items-center mb-3">
                <h3 className="font-medium text-gray-700">Related Images</h3>
                <div className="flex space-x-1">
                  <button 
                    onClick={getRelatedImages}
                    className="text-indigo-500 hover:text-indigo-700 p-1 rounded hover:bg-gray-100"
                    title="Refresh images"
                    disabled={isLoadingImages}
                  >
                    {isLoadingImages ? 
                      <Loader2 size={16} className="animate-spin" /> : 
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"/><path d="M3 3v5h5"/></svg>
                    }
                  </button>
                  <button 
                    onClick={() => setShowRelatedImages(false)}
                    className="text-gray-500 hover:text-gray-700 p-1 rounded hover:bg-gray-100"
                    title="Close panel"
                  >
                    <X size={16} />
                  </button>
                </div>
              </div>
              
              {isLoadingImages ? (
                <div className="flex flex-col justify-center items-center h-40">
                  <Loader2 size={24} className="animate-spin text-indigo-500 mb-2" />
                  <p className="text-sm text-gray-500">Searching for images...</p>
                </div>
              ) : relatedImages.length > 0 ? (
                <div className="space-y-3">
                  <div className="grid grid-cols-2 gap-3">
                    {relatedImages.map((image, index) => (
                      <div key={index} className="relative group cursor-pointer">
                        <div className="overflow-hidden rounded-md border border-gray-200 bg-gray-50">
                          <a 
                            href={image.context} 
                            target="_blank" 
                            rel="noopener noreferrer" 
                            className="block relative pb-[75%]" // 4:3 aspect ratio
                            title={image.title}
                          >
                            <img 
                              src={image.thumbnail || image.src} 
                              alt={image.title || `Related image ${index + 1}`}
                              className="absolute inset-0 w-full h-full object-cover transition-transform duration-200 group-hover:scale-105"
                              onError={(e) => {
                                // Fallback if image fails to load
                                const target = e.target as HTMLImageElement;
                                target.src = 'https://via.placeholder.com/150/e2e8f0/64748b?text=Image+Error';
                                target.onerror = null; // Prevent infinite error loops
                              }}
                            />
                            <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all flex items-center justify-center opacity-0 group-hover:opacity-100">
                              <div className="flex space-x-2">
                                <button 
                                  className="bg-white p-1.5 rounded-md shadow-md hover:bg-gray-100"
                                  onClick={(e) => {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    navigator.clipboard.writeText(`![${image.title || 'Related image'}](${image.src})`);
                                    setSystemMessage('Image markdown copied to clipboard');
                                  }}
                                  title="Copy markdown image link"
                                >
                                  <FaCopy size={14} className="text-indigo-600" />
                                </button>
                                <button
                                  className="bg-white p-1.5 rounded-md shadow-md hover:bg-gray-100"
                                  onClick={(e) => {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    const imageMarkdown = `